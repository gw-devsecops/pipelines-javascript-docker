# This is a basic workflow to help you get started with Actions

name: Docker Image Scan

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  asc_scan:
    runs-on: ubuntu-latest
    env:
      ACR_REPO_NAME: github-pipelinesjavascriptdocker
      ACR_SERVER: gw1containerregistry.azurecr.io
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        
      - name: Build a sample Docker image
        run: |
          docker build -t ${{ env.ACR_SERVER }}/${{ env.ACR_REPO_NAME }}:${{ github.sha }} -file ./app
          
      - name: Scan Docker image using Azure Container Scan action
        uses: Azure/container-scan@v0
        id: container-scan
        continue-on-error: true
        with:
          image-name: ${{ env.ACR_SERVER }}/${{ env.ACR_REPO_NAME }}:${{ github.sha }}
          # run-quality-checks provides CIS benchmark assessment
          run-quality-checks: true
          
      - name: Login to Azure Container Registry
        uses: Azure/docker-login@v1
        with:
          login-server: azsecacr.azurecr.io
          username: ${{ secrets.GW_ACR_USERNAME }}
          password: ${{ secrets.GW_ACR_PASSWORD }}
          
      - name: Push scanned image to ${{ env.ACR_REPO_NAME }}
        run: |
          docker push ${{ env.ACR_SERVER }}/${{ env.ACR_REPO_NAME }}:${{ github.sha }}
          
      - name: Post result status to Azure Security Center
        uses: Azure/publish-security-assessments@v0
        with:
          artifact-type: containerImage
          scan-provider: trivy
          connection-string: ${{ secrets.GW_CICD_CONNECTION_STRING }}
          subscription-token: ${{ secrets.GW_CICD_AUTH_TOKEN }}
          scan-results-path: ${{ steps.container-scan.outputs.scan-report-path }}
